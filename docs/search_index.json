[["index.html", "ちょっとニッチなR入門1 Chapter 1 はじめに", " ちょっとニッチなR入門1 Tomokazu NOMURA 2021/01/18 Chapter 1 はじめに レポートや卒業論文で，Rを使ってデータ分析を行うための方法を説明する。Rについての解説ページは多数あるが，ここではとくに社会科学系分野におけるデータ分析を想定して説明する。体系的な内容というよりは，ほかの資料で説明されていることの隙間を埋めることを意図しているので，いろいろな資料と合わせて読んでほしい。 とくにおすすめのページは以下。 立命館大学の森先生による「卒業論文のためのR入門」 関西大学の宋先生と高知工科大学の矢内先生による「私たちのR：ベストプラクティスの探求」 北海道大学の土居先生による「Rで計量政治学入門」 今後，ビジネスにおいても，学術研究においても，統計データを用いた分析は最も重要なツールになっていくと考えられる。統計学の理論を理解しておくことも重要だが，実際にデータを収集して整理し分析することができなければ，せっかくの理論も役に立たない。理論と実践をバランス良く学ぶことが重要。 データを分析するなら，Excelでもできると思うかもしれない。実際，「分析ツール」などの機能を用いれば，Excelでも一通りの統計分析ができる。しかし，Excelは基本的にデータを分析するためのソフトウェアではないので，大規模なデータを扱ったり，高度な分析を行ったりするには向いていない。専用のソフトウェアを使えばExcelよりも簡単にいろいろな分析を行うことができるので，Rをはじめ無料でもいろいろなデータ分析ソフトウェアが利用できる現在，無理してExcelでやろうとするメリットはない(Excelにはほかに使い途がある)。 Rはオープンソースのデータ分析ソフトウェア。完全に無料で利用でき全世界に多数のユーザーがいるため，使い方についてさまざまな情報がインターネットで入手できる。また，最新の分析手法を用いるためのパッケージが絶えず開発されリリースされている。そのため，おカネをかけずに自力で高機能な統計ソフトを習得したいのであれば，Rをおすすめする。最初は少しとっつきにくいと感じるかもしれないが，慣れてくれば非常に柔軟な使い方ができる(統計分析だけでなく，論文を書いたりスライドを作ったりもできる)。 "],["rとrstudioのインストール.html", "Chapter 2 RとRStudioのインストール 2.1 Rが使えるパソコン 2.2 インストール方法 2.3 RStudioの画面 2.4 ヘルプの参照 2.5 チュートリアルの実行 2.6 パッケージのインストール", " Chapter 2 RとRStudioのインストール 2.1 Rが使えるパソコン Rはオープン・ソースで開発されており，Windows，Mac，Linuxのいずれでも利用可能。Rそのものは性能の低いマシンでも十分に動作する(ただし，分析するデータの規模や用いる分析手法によってはある程度高性能なパソコンが必要になるかもしれない)。また，RStudioはRを便利に使うために必須と言えるソフトウェア。 これからパソコンを用意するという人には，Mac &gt; Linux &gt; Windowsの順でおすすめする。(わたしが)Rを使っていてトラブルが少ないのはMac。LinuxもMacと共通の部分が多く安定しているが，一般の人にはあまり馴染みがないと思うので，R以外の用途を考えると選択肢からは外れそう。Windowsは最初に少し設定が必要なのと，フォルダやファイル名に注意して利用する必要がある。といっても，いま使っているPCがWindowsであれば，買い換えるほどのものでもない。 Windowsの場合には，WSLという仮想環境のLinuxにRをインストールして使うことも可能。わたしは，WSLにRとRStudio Serverをインストールして，ChromeなどのブラウザでRStudioを使っている(快適)。 2.2 インストール方法 インストールの方法については，高知工科大学の矢内先生のホームページに，これ以上丁寧に説明することはできないというくらいに丁寧な解説スライドが公開されている。Ubuntu，Mac，Windows版があるので，これらを参考にインストールすると良い。ただし，うまくいかなくても矢内先生に直接質問のメールを送ったりはしないこと。 2.2.1 Mac 矢内先生の資料通りに進めても良いが，とにかく速くインストールして使いたいということであれば，Homebrewを使うのが良い。 HomebrewはMacのパッケージマネージャ。ソフトのインストールやアップグレードの管理が容易にできるようになるので，おすすめ。 RとRStudioもHomebrewを使えば簡単にインストールできる。 Homebrewをインストールしていない人は，ターミナルで以下のコマンドを実行すればインストール可能(詳細は，ここを参照)。 Command Line ToolsはHomebrewをインストールする際自動的にインストールされる。 /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Homebrewがインストールできたら，ターミナルで以下のコマンドを実行することでRとRStudio，ついでにXquartzをインストールできる。 brew install --cask r rstudio xquartz 2.2.2 Windows WindowsにRをインストールする際には，事前にいくつかの設定を行っておく必要がある。矢内先生の資料に丁寧にまとめられているので，それを見ながらインストールすると良い。以下補足。 プログラミング用フォントのインストールはとりあえず飛ばしてもかまわない。 RtoolsもとりあえずなくてもOk(パッケージをソースコードからビルドする場合に必要だが，ほとんどのパッケージはビルド済みのバイナリが提供されている)。 全角文字(とくに全角スペース)が含まれるホーム・フォルダ名の問題は，Rに限らずさまざまなソフトで問題を引き起こすので，対処しておく必要がある。 最近ではMicrosoftアカウントでWindowsをセットアップすると，Microsoftアカウント(メールアドレス)の最初の5文字がホーム・フォルダ名になるはずなので，通常は問題ないはず。 ホームフォルダ名に漢字などの全角文字が使われている場合は，いっそのことOSを初期化してMicrosoftアカウントを使って再セットアップした方がいいかもしれない(ユーザー名だけを変更しても，ホームフォルダ名は変わらない)。 初期化したくない場合には，矢内先生の資料の対処法その3(シンボリックリンク作成)が良いと思う。 One Drive問題にも対処が必要。 Rはパッケージをドキュメント・フォルダにインストールする。ドキュメント・フォルダがOneDriveに管理されていると，フォルダ名に全角文字(カタカナで”ドキュメント”)が含まれるためパッケージを読み込むことができなくなる。 Office 365のOneDriveを使っている場合には，矢内先生の資料の対処法その3で，パッケージをインストールするフォルダとして別の場所を指定するのが良い。 2.2.3 WSL (Windows Subsystem for Linux) 2.2.3.1 WSLとは Linuxには便利なツール(コマンド)があって，その多くはWindowsでも使えるが，実行速度や安定性ではLinuxに軍配が上がる。RもWindowsよりもLinuxの方が速いらしい。 WSLはWindows上で動作するLinuxの仮想環境。Windowsマシン上でもう1台LinuxのPCを動かすようなイメージ。メインマシンをLinuxにしようってほど尖ってはいないが，Linuxのツールを使いたいという場合に便利。 2.2.3.2 WSL2のインストール BIOSで仮想化支援機能を有効にする 有効になっているかどうかはVirtualCheckerで確認できる(最初から有効になっている場合もある) BIOSでの設定方法はメーカーによって異なるが，IntelだとIntel Virtualization Technology(VTx)，AMDだとAMD-VとかSVMとかいう設定項目 Windows 10 バージョン 2004 以降では，PowerShellで以下のように入力すればインストールできる(仮想化支援機能の有効化は必要)。デフォルトでUbuntuもインストールされるので，これだけですぐに使えるようになる。 wsl --install 2.2.3.3 初期設定 スタートメニューなどにUbuntuのショートカットが追加されているので起動する。初回起動時は，設定が行われるため数分かかる。 起動すると新規ユーザー名とパスワードを聞かれるので適当に設定すれば良い(パスワードは入力しても表示されないので注意)。パスワードはWindowsよりも頻繁に入力を求められるので入力しやすいものにしておいた方が良い。 起動したら，まず以下のコマンドでパッケージのアップデートを行っておく。 sudo apt update sudo apt upgrade -y WindowsからLinuxのファイルへアクセスするには，エクスプローラーのアドレスバーに”¥¥wsl$“と入力 WindowsのコマンドプロンプトやPowerShellからLinuxのコマンドを使うには，wslコマンド，もしくはubuntu runコマンドを使う wsl ls -l ubuntu run ls -l 2.2.3.4 RStudio Serverとは WSL上のLinuxにRStudioをインストールすれば普通にLinuxデスクトップ版RStudioを使うことができるようになるが，ここではRStudio Serverを使う方法を説明する。RStudio Serverは，RStudioをブラウザで使うことができる自前のRStudio Cloud。インターフェイスや操作性はデスクトップ版RStudioとほぼ変わらない。 RStudio Serverのメリットは，インストールしたマシン以外からもブラウザで簡単にアクセスして使える点。サーバー1台にインストールしておけば，どのマシンからアクセスしても同じRの環境で分析ができるし，中断した作業を別のマシンでシームレスに再開することも可能。一応，iPadやスマホでも使うことができる。 2.2.3.5 R本体およびRStudio Serverのインストール 基本的には，ここで解説されている通りにやればできる。 まず，証明書とレポジトリを追加 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&#39; RおよびRStudio Serverを使うために必要なパッケージをインストール sudo apt install -y r-base r-base-core r-recommended r-base-dev gdebi-core build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev Ubuntu用のRStudio Serverをダウンロード wget https://rstudio.org/download/latest/stable/server/bionic/rstudio-server-latest-amd64.deb RStudio Serverのインストール(“Couldn’t find an alternative telinit implementation to spawn.”というメッセージが出るが，無視してよいとのこと) sudo gdebi rstudio-server-latest-amd64.deb RStudio Serverを起動 sudo rstudio-server start http://localhost:8787にアクセスしてRStudio Serverが動いていることを確認 ユーザー名とパスワードは，Ubuntuに設定したもの LAN内のほかのPCやインターネット経由でもアクセスできるようにすれば便利(ただし，このまま外部からアクセスできるようにするのは危険) 2.3 RStudioの画面 RStudioを起動すると，細かい違いはあれ下のような画面が表示されるはず。 RStudio デフォルトでは白背景の配色になっていると思うが，コードを書くときは黒や青背景の方が見やすいので変更している。見た目を変更するには，RStudioのメニューから[Tools]&gt;[Global Options…]を選び，Appearanceで設定する。長時間の作業を行う場合には，色やフォントによって作業効率や目の疲れ方がけっこう変わってくるので，いろいろ試して自分にあった設定にしよう。 RStudioの画面は，デフォルトで4ペイン(4分割)。最初はそのまま使っても良いと思うが，画面のレイアウトは比較的自由に変えることができるので，慣れてきたら自分が使いやすいように設定しよう。 各ペインにはタブが複数配置されている。まずは，よく使うものだけ説明する。 Sourceペイン：デフォルトでは左上。何もファイルが開かれていない状態では最小化されているので，画面左上の+マークで新しいスクリプト・ファイル(R Script)を作成してみよう。 Consoleペイン：デフォルトでは左下。Rにコマンドを入力して実行する画面。 Environmentなどのペイン：デフォルトでは右上。Environmentタブには記憶されている変数やデータなどが表示される。Historyタブには実行したコマンドの履歴が表示され，選択して再度実行できる。 Filesなどのペイン：デフォルトでは右下。Filesタブには現在のディレクトリにあるファイルのリストが表示される。ファイル名をクリックすればファイルを開くことができる。RのソースコードなどやデータフレームはSourceペインで開かれる。Plotsタブはグラフが表示される場所。 Rで単発のコマンドを実行するときには，Consoleタブで行う。ただし，通常はスクリプト・ファイルにコマンドを書いて一つずつ実行していったり，いくつかのコマンドをまとめて実行したりすることが多い。Consoleでコマンドを実行した場合にも，Histroyタブからスクリプト・ファイルへと実行したコマンドを貼り付けておくと良い。そうすれば，いつでも作業を最初から再現できる。研究では，結果を再現できることが極めて重要。再現性を担保できることは，ExcelではなくRを使うメリットの一つ。 スクリプト・ファイルに書かれたコマンドを実行する場合，Ctrlを押しながらEnterを押す。範囲が選択されていない場合には，カーソルのある行(コマンドが複数行にまたがっていてもOk)が実行される。範囲を選択してCtrl+Enterを押せば，選択された範囲のコードが順に実行される。 2.4 ヘルプの参照 Rのコマンド・ヘルプは?のあとにコマンド名を入力すれば参照できる。ヘルプは，Helpタブ(デフォルトでは右下のペイン)に表示される。知らないコマンドが出てきたらまずはヘルプを読む。英語が苦手でもDeepLで翻訳すればだいたい読める。 たとえば，table関数のヘルプを読みたければ， ?table 2.5 チュートリアルの実行 右上のペインにTutorialというタブがあり，そこからRのチュートリアル・レッスンを受けられる。チュートリアルを実行するためのパッケージをインストールするのに時間がかかるが，とりあえず一通り実行してみると，Rの使い方についてのイメージを持つことができるかもしれない。 2.6 パッケージのインストール Rは本体にパッケージを追加することで，機能を拡張することができる。パッケージをインストールするには，install.packages関数を用いる。とくに，tidyverseパッケージは必ず利用することになるので，インストールしておこう。 install.packages(&quot;tidyverse&quot;) MacやUbuntuの場合，もしかしたら”openssl”がないみたいなエラーが出るかもしれない。そのときは，opensslをインストールしてから，再度実行する。 opensslはMac(Homebrew)だと， brew install openssl Ubuntuだと， sudo apt install openssl でインストールできる。 インストールしたパッケージは毎回読み込む必要がある。パッケージを読み込むにはlibrary関数を使う。 library(tidyverse) "],["rにおけるオブジェクト.html", "Chapter 3 Rにおけるオブジェクト 3.1 数値と文字列 3.2 ベクトル 3.3 ファクター 3.4 データフレーム 3.5 関数 3.6 関数の自作", " Chapter 3 Rにおけるオブジェクト 3.1 数値と文字列 Rでは，さまざまな情報を記憶するための「箱」のことをオブジェクトという。オブジェクトには数値や文字，ベクトル，データフレームなどを記憶させることができる。 オブジェクトの名前は比較的自由につけることができる。日本語(漢字)を使うこともできるが，変数名に使うのはなるべく英数字とアンダースコア”_“だけにした方が良い。 たとえば，a というオブジェクトに2という数値，bというオブジェクトに2.5という数値を記憶させてみよう。 a &lt;- 2 b &lt;- 2.5 このような操作を「代入」という。代入が正しく行われたかどうかを確認してみよう。 a ## [1] 2 b ## [1] 2.5 a + b ## [1] 4.5 a * b ## [1] 5 a, bにそれぞれ2，2.5という数値が代入されていて，a,bを用いた計算もできることがわかる。 また，RStudioの”Environment”タブにオブジェクト名a，bと代入された値が表示されていることもあわせて確認しよう。 Environment オブジェクトには，数値だけではなく，文字列を代入することもできる。文字列は，ダブルクオーテーション”“で括る。 name &lt;- &quot;大阪 太郎&quot; gender &lt;- &quot;男&quot; age &lt;- &quot;20&quot; Environment nameというオブジェクトには”大阪 太郎”という文字列，genderというオブジェクトには”男”という文字列，ageというオブジェクトには”20”という文字列が代入れていることがわかる。 ここで，ageに代入されている”20”は，20という数値ではなく，文字列として扱われていることに注意しよう。そのため，ageを数値として計算に用いることはできず，下のようなエラーとなる。 age + 10 ## Error in age + 10: 二項演算子の引数が数値ではありません オブジェクトは代入されるものによっていくつかの型(Type)に分類される。ここでは，a，bは数値型(numeric)，name，gender，ageは文字列型(character)となる。 EnvironmentタブをList表示からGrid表示に切り替えれば，オブジェクトの型が表示される。 Grid表示 文字列型のオブジェクトを数値型に変換したい場合には，as.numeric()関数を用いる。 as.numeric(age) + 10 ## [1] 30 この例ではageは文字列型だが，as.numeric(age)でageを数値型に変換している。数値型に変換されているので，計算を行うことができる。 逆に数値型のオブジェクトを文字列型に変換するには，as.character()関数を用いる。 3.2 ベクトル 1つのオブジェクトに，複数の数値や文字列を代入することもできる。複数の数値や文字列が格納されたオブジェクトをベクトルという。たとえば，nameというベクトルに3人の名前を代入し，ageというベクトルに3人の年齢を代入してみよう。ベクトルは，c(要素1,要素2,…)で表す。 name &lt;- c(&quot;大阪 太郎&quot;, &quot;兵庫 次郎&quot;, &quot;京都 花子&quot;) age &lt;- c(19, 21, 20) nameとageの内容を確認してみよう。 name ## [1] &quot;大阪 太郎&quot; &quot;兵庫 次郎&quot; &quot;京都 花子&quot; age ## [1] 19 21 20 nameとageの内容が先ほどのものと置き換わっていることがわかる。Rでは既存のオブジェクトに改めて別の内容を代入すると，中身が置き換えられる。 ベクトル Environmentタブで確認すると，nameとageのLengthが1から3へと変わっていることがわかる。Lengthはベクトルの長さ(要素の数)を表す。 ベクトルから1つの要素を取り出すには，ベクトル名のあとに[要素番号]をつける。ただし，ベクトルの要素番号は1から始まることに注意しよう(言語によっては0から始まるものもあるので混乱しないよう)。たとえば，nameというベクトルの2番目の要素を取り出すのであれば，下のように書く。 name[2] ## [1] &quot;兵庫 次郎&quot; 3.3 ファクター 性別や都道府県，アンケートの「はい」か「いいえ」など，カテゴリを表す情報には，factor型変数を用いる。 たとえば，性別を格納するベクトルgenderを作成し，factor型に変換してみよう。ベクトルをfactor型に変換するにはas.factor()関数を用いる。 gender &lt;- c(&quot;男&quot;, &quot;女&quot;, &quot;男&quot;) gender &lt;- as.factor(gender) genderの内容を確認してみよう。 gender ## [1] 男 女 男 ## Levels: 女 男 これは，ベクトルの内容は3人の性別(男，女，男)で，ベクトルの要素は「女」と「男」の2つのレベルに分類されていることを示している。 factor型のオブジェクトは，数値型へと変換することができる。factor型のオブジェクトgenderを数値型に変換して，新しいオブジェクトgender_numに代入してみよう。 gender_num &lt;- as.numeric(gender) gender_num ## [1] 2 1 2 性別が番号(女：1，男：2)に変換されていることがわかる。このとき振られる番号は，Levelsで表示される順番となる。レベルの順番は，factor関数でlevelsを指定することで変更可能。 gender &lt;- factor(gender, levels = c(&quot;男&quot;, &quot;女&quot;)) gender ## [1] 男 女 男 ## Levels: 男 女 as.numeric(gender) ## [1] 1 2 1 3.4 データフレーム 複数の(長さが同じ)ベクトルを束ねたオブジェクトをデータフレームという。多くの場合，統計データはデータ・フレームの形に整理して分析する。たとえば，3人の名前が格納されたベクトルname(文字列型)，年齢が格納されたベクトルage(数値型)，性別が格納されたベクトルgender(factor型)を，1つに束ねてdfというデータフレーム・オブジェクトを作成してみよう。データフレームを作成するには，data.frame()関数を用いる。data.frame関数の引数には，データフレームに含めたいオブジェクト(ベクトル)をカンマで区切って指定する。 df &lt;- data.frame(name, age, gender) df ## name age gender ## 1 大阪 太郎 19 男 ## 2 兵庫 次郎 21 女 ## 3 京都 花子 20 男 行数3(3人分のデータ)，列数3(name, age, genderの3つのベクトル)のデータフレームが作成されたことが確認できる。 Environmentタブにもdfが追加されていることを確認しよう。データフレームの中身を確認したいときには，EnvironmentタブはList表示にしておく方が便利。データフレーム名の左にある青い矢印のようなボタンを押せば，内容の表示・非表示が切り替えられる。 データフレーム データフレーム名(いまの場合はdf)もしくはその右にあるスプレッド・シートのマークをクリックすれば，ソースコードのペインにデータフレームがExcelのようなスプレッド・シート形式で表示される。 データフレーム データフレームに含まれる変数(ベクトル)は，データフレーム名$ベクトル名で表す。たとえば，dfというデータフレームに含まれるageというベクトル(変数)であれば，df$ageで表す。 たとえば，3人の平均年齢を求めてみよう。 mean(df$age) ## [1] 20 3.5 関数 Rではほとんどの処理を関数を用いて行う。関数というのは，なにかを入力すれば，それに応じた出力が得られるものである。入力する「なにか」のことを引数という。関数はfunction_name(引数1, 引数2, ･･･)ような形で用いられる。 たとえば，abs()という関数は，引数を1つ入力すれば，その引数の絶対値を返す。 abs(-1) ## [1] 1 関数は，必ずしも何かを計算するためだけに用いるわけではなく，画面に何かを表示させたり，ファイルからデータを読み込んだりといったことも，すべて関数を用いて行う。 また，関数には引数を取らないものもある。たとえば，q()と入力すればRを終了させることができるが，q()も関数である。 3.6 関数の自作 もとからRに組み込まれている関数に加え，自分で関数を定義することもできる。同じような計算や処理を何度も行うときには，一連の処理を関数として定義しておけば便利だ。 たとえば，順列・組合せを求めたいとしよう。Rには組合せを求める関数としてchoose(n,r)という関数が用意されており，n個のなかからr個を選ぶ組合せが何通りあるかを返す。 たとえば，37個の数字のなかから7個を選ぶ組合せは，以下のように求めることができる。 choose(37,7) ## [1] 10295472 ロト7宝くじというのは，37個の数字のなかから自分が好きな数字を7個選び，それが7つの当選番号とすべて一致すれば一等というクジだ。37個の数字のなかから7個を選ぶ組合せは，ここで計算したように1千万通り以上だから，ロト7で一等が当たる確率は，1千万分の1以下ということになる。 次に順列を求めてみよう。Rにはn個の中からr個を取り出す順列を求める関数は用意されていない。そこで，nとrを引数として与えれば，順列を返す関数を自作してみよう。自作の関数は， 関数名 &lt;- function(引数1, 引数2, ...){ ...処理内容... } の形で定義する。 n個の中からr個を取り出す順列\\({}_nP_r\\)は， \\[{}_nP_r = \\frac{n!}{(n-r)!}\\] で計算できる。ただし，\\(n!=n \\times (n-1) \\times (n-2) \\times \\cdots \\times 1\\)であり，これを\\(n\\)の階乗という。階乗は，factorial()関数で求めることができる。 順列の計算を行う関数をpermut()として定義しよう。 permut &lt;- function(n, r){ p &lt;- factorial(n) / factorial(n - r) return(p) } 自作の関数 このコードを実行したら，environmentタブを見てみよう。permutという関数が作成されて表示されているはずだ。 自作の関数permut()の引数はnとrの2つであり，これらを使って\\({}_nP_r\\)を計算し，pに代入する。次に，return(p)で順列の計算結果を返す。 return()は関数が返す値を指定するが，これを指定しなければ，関数は最後に行われた計算結果を返す。したがって，permut()関数は以下のように書いても良い。 permut &lt;- function(n, r) {factorial(n) / factorial(n - r)} ここでは計算が1つしか行われていないので，その結果が返される。 作成した関数を用いて実際に順列を求めてみよう。 permut(10, 4) ## [1] 5040 permut(4, 2) ## [1] 12 permut(8, 0) ## [1] 1 "],["データの要約1記述統計量.html", "Chapter 4 データの要約1（記述統計量） 4.1 データの概観 4.2 要約統計表の作成 4.3 相関表 4.4 グループ分け", " Chapter 4 データの要約1（記述統計量） データを入手したら分析を行う前にデータの概観を把握することが重要である。データフレームにどのような変数が含まれているかを確認し，それぞれの変数の記述統計量(平均値，分位点，分散など)を求め，必要であれば変数間の相関関係を調べよう。 ここでは，Rのパッケージ，tidyverseとstargazerを利用するので読み込んでおく。 library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.4.0 ✔ purrr 0.3.5 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.10 ## ✔ tidyr 1.2.1 ✔ stringr 1.4.1 ## ✔ readr 2.1.3 ✔ forcats 0.5.2 ## ── Conflicts ───────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(stargazer) ## ## Please cite as: ## ## Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables. ## R package version 5.2.3. https://CRAN.R-project.org/package=stargazer 4.1 データの概観 ここでは，練習としてRに組み込まれているサンプル・データirisを使ってデータを概観する。まず，サンプル・データをirisというデータフレームに読み込む。 iris &lt;- iris irisデータには，150のアヤメについて，種類(3分類)，萼片(がくへん)の長さと幅，花弁(かべん)の長さと幅の5つの変数が記録されている。 変数名 説明 Sepal.Length 萼片の長さ Sepal.Width 萼片の幅 Petal.Length 花弁の長さ Petal.Width 花弁の幅 Species アヤメの種類 データにどのような変数が含まれているかは，スプレッド・シートを表示させれば把握できるが，glimpse()関数を使っても良い(tidyverseの読み込みが必要)。 glimpse(iris) ## Rows: 150 ## Columns: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… データの行数(観測数)が150，列数(変数の数)が5であることがわかる。また，5つの変数のはじめのいくつかの観測値を見ることができるので，データのイメージがつかめる。&lt;dbl&gt;や&lt;fct&gt;はそれぞれの変数の型で，dblは実数型，fctはファクター型であることを表している。変数の型には，ほかに文字列型&lt;chr&gt;，整数型&lt;int&gt;などがある。 4.2 要約統計表の作成 データ全体のイメージがつかめたら，次は記録されている変数の要約統計表を作成してみよう。summary()関数を用いれば，データフレームに含まれるすべての変数の要約統計量を表示させることができる。 summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 数値型の変数については，最小値(Min.)，第一四分位(1st Qu.)，中央値(Median)，平均値(Mean)，第三四分位(3rd Qu.)，最大値(Max)が表示される。また，ファクター型の変数については，度数分布表が表示される。 これでも十分だが，要約統計量を求める変数や，求める要約統計量をカスタマイズしたい場合には，summarize()関数を用いる。 summarize(iris, 萼片長平均 = mean(Sepal.Length), 萼片長標準偏差 = sd(Sepal.Length), 花弁長平均 = mean(Petal.Length), 花弁長標準偏差 = sd(Petal.Length) ) ## 萼片長平均 萼片長標準偏差 花弁長平均 花弁長標準偏差 ## 1 5.843333 0.8280661 3.758 1.765298 summarize()関数の第1引数にはデータフレーム名を指定する。第2引数以降は要約統計量の名前と対象の変数名を，名前=関数(変数名)という形式で指定する。名前は表示名なので自由に指定すれば良い。関数の部分には，例として下の表のような関数が利用できる。変数名xには，データフレーム内の変数名を指定すればよく，データフレーム名は必要ない。 関数 説明 mean(x) xの平均値 var(x) xの分散 sd(x) xの標準偏差 max(x) xの最大値 median(x) xの中央値 min(x) xの最小値 quantile(x, XX) xのXX×100パーセンタイル, e.g. xの25パーセンタイルであればquantile(x,0.25) summarize()関数は，後で述べるようにグループ別の集計のときに役に立つ。 レポートや論文に貼り付けるための要約統計表を作成するには，stargazerパッケージを用いると良い。 stargazer(iris, type = &quot;text&quot;, title = &quot;要約統計表&quot;, digits = 2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## 要約統計表 ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.84 0.83 4.30 5.10 5.80 6.40 7.90 ## Sepal.Width 3.06 0.44 2.00 2.80 3.00 3.30 4.40 ## Petal.Length 3.76 1.77 1.00 1.60 4.35 5.10 6.90 ## Petal.Width 1.20 0.76 0.10 0.30 1.30 1.80 2.50 ## ------------------------------------------------------------- stargazer()関数は，要約統計表や回帰分析の結果などを，良い感じの見た目で出力してくれる。 stargazer()関数で要約統計表を作成する場合は，第1引数としてデータフレーム(この例ではiris)を指定する。そのほかの引数は必要に応じて指定すれば良い。よく使うオプションだけ説明する。まず，typeは表の出力形式で，“text”(プレーンテキスト)，“html”，“latex”のいずれかを指定する。titleは表のタイトル，digitsは表の数値の小数点以下の桁数を指定する。summary.statsは表に含める要約統計量をベクトル形式で指定する。 要約統計量 指定方法 平均 mean 標準偏差 sd 最小値 min 最大値 max XXパーセンタイル(分位点) pXX 4.3 相関表 次に，変数間の相関を求めよう。相関表を求めるにはcor()関数を使う。引数にはデータフレーム名を指定する。ただし，irisにファクター型のSpeciesという変数が含まれているため，そのままではエラーになる。そこで，まずデータフレームirisから数値型の4つの変数だけを取り出したデータフレームiris2を作成する。 iris2 &lt;- select(iris, - Species) select()は，データフレームから指定した変数を残したデータフレームを作成する関数である。第1引数には取り出したい変数が含まれるデータフレームを指定する。第2引数以降は取り出したい変数名をカンマで区切って指定する。たとえば，select(dataframe,a,b)はdataframe$aとdataframe$bの2つの変数が含まれるデータフレームとなる。逆にデータフレームから指定した変数を除外したいときには，第2変数以降に変数名に”-“をつけて指定する。たとえば，select(dataframe,-a)はdataframeから変数aを除いたデータフレームとなる。また，変数は列番号で指定することも可能である。たとえば，select(dataframe,2:4)はdataframeから2列目から4列目までの変数を取り出したデータフレームとなる。 ここでは，irisに含まれる5つの変数のうち数値型の4つを取り出して相関表を作成したいので，ファクター型の変数Speciesだけを除外したiris2を作成している。cor()関数の引数に，iris2を指定すると，相関行列が得られる。 cor(iris2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Sepal.Length 1.0000000 -0.1175698 0.8717538 0.8179411 ## Sepal.Width -0.1175698 1.0000000 -0.4284401 -0.3661259 ## Petal.Length 0.8717538 -0.4284401 1.0000000 0.9628654 ## Petal.Width 0.8179411 -0.3661259 0.9628654 1.0000000 わざわざ新しいデータフレームを作成せずに，以下のように書いても同じ結果が得られる。 cor(select(iris, - Species)) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Sepal.Length 1.0000000 -0.1175698 0.8717538 0.8179411 ## Sepal.Width -0.1175698 1.0000000 -0.4284401 -0.3661259 ## Petal.Length 0.8717538 -0.4284401 1.0000000 0.9628654 ## Petal.Width 0.8179411 -0.3661259 0.9628654 1.0000000 ほかにも，以下のようなコードでも同じ結果が得られる。入力の簡単さやコードの見た目のわかりやすさで，その都度書き方を考えよう。 cor(select(iris,1:4)) cor(select(iris, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)) 4.4 グループ分け データをグループに分けて，グループごとに要約統計を求めることは，実際に良く行う作業である。irisデータでは，アヤメはsetosa，versicolor，virginicaの3種類に分類されている。アヤメの種類ごとに萼片と花弁の長さ，幅の平均を求めてみよう。そのための方法はいくつか考えられる。 4.4.1 データフレームを分割する まず，データフレームをアヤメの種類ごとに分割する方法。単純でわかりやすいが，分類が多くなると大変になる。 アヤメの種類ごとのデータフレームを作成するには，filter()関数を用いる。filter()はデータフレームから条件を満たすデータ(行)を取り出す関数で，第1引数にはデータフレーム名，第2引数には抽出条件を指定する。 iris_setosa &lt;- filter(iris, Species == &quot;setosa&quot;) iris_versicolor &lt;- filter(iris, Species == &quot;versicolor&quot;) iris_virginica &lt;- filter(iris, Species == &quot;virginica&quot;) アヤメの種類ごとのデータフレームができるので，それぞれのデータフレームで要約統計表を作成する。 stargazer(iris_setosa, type = &quot;text&quot;, title = &quot;setosa&quot;, digits = 2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## setosa ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.01 0.35 4.30 4.80 5.00 5.20 5.80 ## Sepal.Width 3.43 0.38 2.30 3.20 3.40 3.68 4.40 ## Petal.Length 1.46 0.17 1.00 1.40 1.50 1.58 1.90 ## Petal.Width 0.25 0.11 0.10 0.20 0.20 0.30 0.60 ## ------------------------------------------------------------- stargazer(iris_versicolor, type = &quot;text&quot;, title = &quot;versicolor&quot;, digits = 2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## versicolor ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 5.94 0.52 4.90 5.60 5.90 6.30 7.00 ## Sepal.Width 2.77 0.31 2.00 2.52 2.80 3.00 3.40 ## Petal.Length 4.26 0.47 3.00 4.00 4.35 4.60 5.10 ## Petal.Width 1.33 0.20 1.00 1.20 1.30 1.50 1.80 ## ------------------------------------------------------------- stargazer(iris_virginica, type = &quot;text&quot;, title = &quot;virginica&quot;, digits = 2, summary.stat = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## virginica ## ============================================================= ## Statistic Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ------------------------------------------------------------- ## Sepal.Length 6.59 0.64 4.90 6.23 6.50 6.90 7.90 ## Sepal.Width 2.97 0.32 2.20 2.80 3.00 3.18 3.80 ## Petal.Length 5.55 0.55 4.50 5.10 5.55 5.88 6.90 ## Petal.Width 2.03 0.27 1.40 1.80 2.00 2.30 2.50 ## ------------------------------------------------------------- 4.4.2 group_by()を使う たぶんこれが標準的で，洗練された方法。 group_by関数を使うと，(Rの内部で)グループに分類されたデータフレームを作成することができる。第1引数には分類したいデータフレーム名，第2引数以降は分類を行うためのファクター型変数を指定する。複数のファクター型変数を指定して，階層的な分類を行うことも可能。グループに分類されたデータフレームにsummarize()関数を適用すると，グループごとの要約統計量が計算される。 iris_grouped &lt;- group_by(iris, Species) summarize(iris_grouped, 萼片長平均 = mean(Sepal.Length), 萼片長標準偏差 = sd(Sepal.Length), 花弁長平均 = mean(Petal.Length), 花弁長標準偏差 = sd(Petal.Length) ) ## # A tibble: 3 × 5 ## Species 萼片長平均 萼片長標準偏差 花弁長平均 花弁長標準偏差 ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 0.352 1.46 0.174 ## 2 versicolor 5.94 0.516 4.26 0.470 ## 3 virginica 6.59 0.636 5.55 0.552 4.4.3 xtabs()を使う xtabs()関数を使うと，多次元分割表を柔軟に作成することができる。第1引数には形式を，第2引数にはデータフレーム名を指定する。形式は，~ x1 + x2 + ...かy ~ x1 + x2 + ...の形で指定する。たとえば，~ x1 + x2を指定すれば，x1,x2で表を分割し，各セルの観測数が得られる。y ~ x1 + x2を指定すれば，x1,x2で表を分割し，各セルに入るデータのyの合計が得られる。 irisでは分類に用いることができる変数はSpeciesの1つしかないが，それでもxtabs()を適用できる。以下のコードでSpeciesごとのデータ数の表を作成できる。 xtabs(~Species, iris) ## Species ## setosa versicolor virginica ## 50 50 50 次に，以下のコードでSpeciesごとの萼片長の合計値の表を作成できる。 xtabs(Sepal.Length ~ Species, iris) ## Species ## setosa versicolor virginica ## 250.3 296.8 329.4 平均値は合計値をデータ数で割ったものなので，Speciesごとの萼片長の平均値を以下のように求められる。 xtabs(Sepal.Length ~ Species, iris) / xtabs(~ Species, iris) ## Species ## setosa versicolor virginica ## 5.006 5.936 6.588 "],["データの要約2グラフの作成.html", "Chapter 5 データの要約2(グラフの作成) 5.1 ヒストグラム 5.2 箱ひげ図 5.3 散布図", " Chapter 5 データの要約2(グラフの作成) データを概観するためには，記述統計量を求めるとともに，グラフを作成して視覚的にデータの特性を捉えることも重要である。一変数の分布を概観するにはヒストグラムや箱ひげ図，変数間の関係を概観するには散布図を描いてみるのが有効。 R本体でもさまざまなグラフを作成することができるが，ggplot2というパッケージを用いればより簡単にモダンなグラフを作成することができる。ggplot2は，tidyverseに含まれているので，tidyverseを読み込んでおく。 library(tidyverse) また，練習用データとしてirisを用いる。 iris &lt;- iris 5.1 ヒストグラム まず，150のアヤメの萼片の長さについて，ヒストグラムを作成してみよう。 ggplot2でグラフを作成するには，まずグラフ・オブジェクトを作成する。 g &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length)) ここでは，gというオブジェクトにグラフの素地を作成している。ggplot()関数の振舞いを理解するのは簡単ではないが，まずは決まったやり方を覚えよう。ggplot()関数を使うときには，まずデータフレームとx軸，y軸にとる変数などをaes()で指定しグラフの素地を作成する。ここではggplot()関数にパイプでデータフレームirisを渡し，aes()でグラフのx軸に用いる変数Sepal.Lengthを指定している。ヒストグラムの場合に最低限必要なのは，x軸の変数(ヒストグラムを作成する変数)だけである。 次にヒストグラムを追加する。 g &lt;- g + geom_histogram() このように，ggplotでは作成した素地に，グラフやさまざまなパーツを足していくことで，好みのグラフを作成する。 グラフを表示させるにはplot()関数を用いる。 plot(g) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. とくに何も指定しなくても，Rが適当に区間を分割してヒストグラムを描いてくれる。 このままだと見にくいので，ヒストグラムのビンの幅を変更し，枠線や塗り色を指定してみよう。ヒストグラムの細かい設定は，geom_histogram()の引数に指定すれば良い。 g &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length))+ geom_histogram(binwidth = 0.25, color = &quot;black&quot;, fill = &quot;blue&quot;) plot(g) 次に，グラフの軸のラベルを変更して，グラフ・タイトルをつけてみよう。下のように，グラフ・オブジェクトにlabs()で軸ラベルやタイトルの設定を足す。 g &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length))+ geom_histogram(binwidth = 0.25, color = &quot;black&quot;, fill = &quot;blue&quot;)+ labs(x = &quot;萼片長&quot;, y = &quot;頻度&quot;, title = &quot;アヤメの萼片長の分布&quot;) plot(g) もし，このグラフのように日本語が文字化けして豆腐みたいになっていたら，フォントを指定する。 theme_set( theme_gray(base_family = &quot;IPAexGothic&quot;)) plot(g) ここでは，IPAexGothicフォントを指定している。もちろん，IPAexGothicフォントがパソコンにインストールされている必要がある。IPAフォントのダウンロードやインストール方法の解説は，文字情報技術促進協議会のホームページを見てほしい。 theme_gray()の部分を変更すれば，グラフの見た目を変えることができる。たとえば，theme_bw()に変えれば，背景が白になるので，印刷する場合に見やすい。 5.2 箱ひげ図 一変数の分布だけに関心があるときにはヒストグラムが有用だが，複数の変数の分布を比較したいときには箱ひげ図が便利である。 まず，アヤメの萼片長の箱ひげ図を描いてみよう。 bp &lt;- iris %&gt;% ggplot(aes(y = Sepal.Length))+ geom_boxplot() plot(bp) 箱ひげ図の場合には，aes()でy軸に変数を指定してやるだけで良い。ここで，yではなくxを指定すれば，横向きの箱ひげ図を描くことができる。 次に，アヤメの種類ごとに箱ひげ図を描いて，萼片長の分布を比較しよう。 bp &lt;- iris %&gt;% ggplot(aes(y = Sepal.Length, fill = Species))+ geom_boxplot() plot(bp) ggplot関数では，aes()にfillでファクター型変数を指定すれば，指定された変数のレベルごとに塗り色を分けてグラフを描くことができる。ここでは，Speciesを指定して，アヤメの種類ごとに塗り分けてグラフを描いている。 5.3 散布図 次に，変数の間の関係を分析するために，散布図を作成してみよう。ここでは，アヤメの萼片の長さを横軸に，萼片の幅を縦軸にとって，この二変数の関係を表す散布図を作成する。 scatter &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length,y = Sepal.Width))+ geom_point() plot(scatter) 散布図の場合は，aes()でx軸の変数とy軸の変数を指定する。あとは，geom_point()を足してやれば，単純な散布図を描くことができる。 散布図も，アヤメの種類ごとに色分けして描くことができる。色分けを行うには，aes()のcolorでファクター型変数を指定すれば良い。この場合は，Speciesによって点の色を変えるので，以下のように書く。 scatter &lt;- iris %&gt;% ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species))+ geom_point()+ labs(x = &quot;萼片長&quot;, y = &quot;萼片幅&quot;, title =&quot;萼片の長さと幅の関係&quot;) plot(scatter) ここでは，あわせてlabs()を足してやることにより，グラフタイトルや軸のラベルも指定している。 ggplotは利用している人が非常に多いので，インターネット上にいくらでも丁寧な解説がある。使い方を覚えるというよりは，グラフを描く必要があるときに，どうすれば目的のグラフを描くことができるかをググりながら使えば良い。 "],["母親の喫煙と新生児の出生時体重.html", "Chapter 6 母親の喫煙と新生児の出生時体重 6.1 データの要約 6.2 単回帰分析 6.3 重回帰分析 6.4 ダミー変数", " Chapter 6 母親の喫煙と新生児の出生時体重 ここでは，母親の喫煙が新生児の出生時体重に与える影響を分析しながら，実際にデータ分析を行う際の手順を概観する。分析に用いるのは，Wooldridgeの”Introductory Econometrics: A Modern Approach”で用いられているbwghtというデータである。Wooldridgeの教科書は，具体的な分析例が多く非常にわかりやすい，計量経済学の最高の入門書である。教科書のなかで用いられているデータは，Rにwooldridgeパッケージを追加することで，簡単に利用することができる。まず，wooldridgeパッケージをインストールしよう。 install.packages(&quot;wooldridge&quot;) 6.1 データの要約 まず，データをbwghtというデータフレームに読み込む。その後，データがどのようなものかを知るために，glimpse()関数でデータの概要を表示させてみよう。 library(tidyverse) library(stargazer) library(wooldridge) bwght &lt;- bwght glimpse(bwght) ## Rows: 1,388 ## Columns: 14 ## $ faminc &lt;dbl&gt; 13.5, 7.5, 0.5, 15.5, 27.5, 7.5, 65.0, 27.5, 27.5, 37.5, 27.5… ## $ cigtax &lt;dbl&gt; 16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 16.5, 1… ## $ cigprice &lt;dbl&gt; 122.3, 122.3, 122.3, 122.3, 122.3, 122.3, 122.3, 122.3, 122.3… ## $ bwght &lt;int&gt; 109, 133, 129, 126, 134, 118, 140, 86, 121, 129, 101, 133, 61… ## $ fatheduc &lt;int&gt; 12, 6, NA, 12, 14, 12, 16, 12, 12, 16, 12, 16, NA, 12, 7, 13,… ## $ motheduc &lt;int&gt; 12, 12, 12, 12, 12, 14, 14, 14, 17, 18, 16, 15, 12, 12, 12, 1… ## $ parity &lt;int&gt; 1, 2, 2, 2, 2, 6, 2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1… ## $ male &lt;int&gt; 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0… ## $ white &lt;int&gt; 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1… ## $ cigs &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ lbwght &lt;dbl&gt; 4.691348, 4.890349, 4.859812, 4.836282, 4.897840, 4.770685, 4… ## $ bwghtlbs &lt;dbl&gt; 6.8125, 8.3125, 8.0625, 7.8750, 8.3750, 7.3750, 8.7500, 5.375… ## $ packs &lt;dbl&gt; 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0… ## $ lfaminc &lt;dbl&gt; 2.6026897, 2.0149031, -0.6931472, 2.7408400, 3.3141861, 2.014… データには，famincからlfamincまで14の変数が含まれており，サンプルサイズは1,388であることがわかる。つまり，1,388件の新生児の出生について，14項目のデータが記録されたデータである。各変数の内容は以下の通りである。 変数名 内容 faminc 家計収入(単位：1000ドル) cigtax 居住州のたばこ税 cigprice 居住州のたばこ価格 bwght 出生時体重(単位：オンス) fatheduc 父親の教育水準(修学年数) motheduc 母親の教育水準(修学年数) parity 子どもの出生順位 male 男児ダミー white 白人ダミー cigs 母親の妊娠中の一日当たり喫煙量(本数) lbwght bwghtの対数値 packs 母親の妊娠中の一日当たり喫煙量(箱数) lfaminc famincの対数値 次に，データの要約統計量を見ておこう。どのようなデータを分析する場合にも，まず要約統計量を確認することが重要である。もし変数に欠損値があったり，異常なデータが紛れ込んだりしている場合，要約統計量を確認することでそのことに気がつくことも多い。 summary(bwght) ## faminc cigtax cigprice bwght ## Min. : 0.50 Min. : 2.00 Min. :103.8 Min. : 23.0 ## 1st Qu.:14.50 1st Qu.:15.00 1st Qu.:122.8 1st Qu.:107.0 ## Median :27.50 Median :20.00 Median :130.8 Median :120.0 ## Mean :29.03 Mean :19.55 Mean :130.6 Mean :118.7 ## 3rd Qu.:37.50 3rd Qu.:26.00 3rd Qu.:137.0 3rd Qu.:132.0 ## Max. :65.00 Max. :38.00 Max. :152.5 Max. :271.0 ## ## fatheduc motheduc parity male ## Min. : 1.00 Min. : 2.00 Min. :1.000 Min. :0.0000 ## 1st Qu.:12.00 1st Qu.:12.00 1st Qu.:1.000 1st Qu.:0.0000 ## Median :12.00 Median :12.00 Median :1.000 Median :1.0000 ## Mean :13.19 Mean :12.94 Mean :1.633 Mean :0.5209 ## 3rd Qu.:16.00 3rd Qu.:14.00 3rd Qu.:2.000 3rd Qu.:1.0000 ## Max. :18.00 Max. :18.00 Max. :6.000 Max. :1.0000 ## NA&#39;s :196 NA&#39;s :1 ## white cigs lbwght bwghtlbs ## Min. :0.0000 Min. : 0.000 Min. :3.135 Min. : 1.438 ## 1st Qu.:1.0000 1st Qu.: 0.000 1st Qu.:4.673 1st Qu.: 6.688 ## Median :1.0000 Median : 0.000 Median :4.787 Median : 7.500 ## Mean :0.7846 Mean : 2.087 Mean :4.760 Mean : 7.419 ## 3rd Qu.:1.0000 3rd Qu.: 0.000 3rd Qu.:4.883 3rd Qu.: 8.250 ## Max. :1.0000 Max. :50.000 Max. :5.602 Max. :16.938 ## ## packs lfaminc ## Min. :0.0000 Min. :-0.6931 ## 1st Qu.:0.0000 1st Qu.: 2.6741 ## Median :0.0000 Median : 3.3142 ## Mean :0.1044 Mean : 3.0713 ## 3rd Qu.:0.0000 3rd Qu.: 3.6243 ## Max. :2.5000 Max. : 4.1744 ## このデータでは，新生児の出生時体重はオンスという単位で記録されている。しかし，オンスという単位にはあまり馴染みがないと思うので，これをグラムに変換しておこう。1オンスは28.3495グラムなので，以下のように新しい変数bwghtgramを作成する。 bwght &lt;- bwght %&gt;% mutate(bwghtgram = bwght * 28.3495) 次に，新生児の出生時体重はどのような分布になっているかを見ておこう。新しく作成したbwghtgramのヒストグラムを作成する。 bwght %&gt;% ggplot(aes(x = bwghtgram)) + geom_histogram(binwidth = 200, color = &quot;black&quot;, fill = &quot;blue&quot;) + labs(x = &quot;出生時体重&quot;, y = &quot;&quot;) + theme_bw(base_family = &quot;IPAexGothic&quot;) ここでわれわれが分析したいのは，母親の妊娠中の喫煙数(本数)が新生児の出生時体重に与える影響である。そこで，母親の妊娠中の喫煙量(たばこの本数)の分布を見ておこう。 bwght %&gt;% ggplot(aes(x = cigs)) + geom_histogram(binwidth = 1, color = &quot;black&quot;, fill = &quot;blue&quot;) + labs(x = &quot;喫煙量&quot;, y = &quot;&quot;) + theme_bw(base_family = &quot;IPAexGothic&quot;) 1,388人中1,200人に近い母親は，妊娠中に喫煙していなかったことがわかる。一方で，妊娠中に喫煙していた母親も一定数いるため，喫煙の有無と新生児の出生時体重との関係を分析することには意味がありそうだ。 そこで，母親の妊娠中の喫煙数(本数)と新生児の出生時体重との関係を散布図で見てみよう。 bwght %&gt;% ggplot(aes(x = cigs, y = bwghtgram)) + geom_point() + labs(x = &quot;喫煙量&quot;, y = &quot;出生時体重&quot;) + theme_bw(base_family = &quot;IPAexGothic&quot;) それほど明確にわかるわけではないが，母親の喫煙量が多いほど新生児の出生体重は低くなっているように見える。そこで，この2つの変数の相関係数を求めてみよう。 cor(select(bwght, bwght, cigs)) ## bwght cigs ## bwght 1.0000000 -0.1507618 ## cigs -0.1507618 1.0000000 相関係数は-0.15であり，母親の喫煙量と新生児の出生時体重には負の相関があることがわかる。 6.2 単回帰分析 相関係数は2変数間の線形関係の強さを表しているが，相関係数からは母親の喫煙量が1本増加すると新生児の出生時体重がどれだけ減少するかということを知ることはできない。そこで，さきほどの散布図に，母親の喫煙量と新生児の出生時体重の関係を近似する直線(回帰直線)を追加してみよう。 \\(cigs\\)の値が与えられたとき，\\(bwghtgram\\)の予測値\\(\\widehat{bwghtgram}\\)を以下のような一次式で表す。 \\[ \\widehat{bwghtgram_i} = \\hat{\\beta_0} + \\hat{\\beta_1} cigs_i \\] この近似式による新生児の出生時体重の予測値\\(\\widehat{bwghtgram}\\)は，実際の\\(bwghtgram\\)の値とは一致しない。そこで，以下の損失関数が最も小さくなるような係数\\(\\hat{\\beta_0},\\hat{\\beta_1}\\)を求めるのが，最小二乗法である。 \\[ L(\\hat{\\beta_0},\\hat{\\beta_1}) = \\sum_{i=1}^n (bwghtgram_i-\\widehat{bwghtgram_i})^2 \\] ざっくりいえば，散布図上のすべての点を通る直線は引くことができないので，できるだけ当てはまりの良い直線を見つけるというのが回帰分析である。当てはまりの良さの尺度はさまざまなものが考えられるが，最小二乗法では予測値と実際の値の差(残差という)の二乗の和を用いる。残差二乗和が最も小さくなるような直線によって2変数の関係を近似するのである。 散布図上に回帰直線を描くだけであれば，以下のようにggplotでstat_smooth()を追加すれば良い。 bwght %&gt;% ggplot(aes(x = cigs, y = bwghtgram)) + geom_point() + stat_smooth(method = &quot;lm&quot;, color = &quot;red&quot;, size = 1) + # 回帰直線を描く labs(x = &quot;喫煙量&quot;, y = &quot;出生時体重&quot;) + theme_bw(base_family = &quot;IPAexGothic&quot;) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## `geom_smooth()` using formula = &#39;y ~ x&#39; 描かれた回帰直線は右下がりであり，母親の喫煙量が増加すれば新生児の出生時体重が減少することを示唆している。 この回帰直線の式は，lm()関数により求めることができる。lm()関数には，引数として回帰式とデータを渡す。回帰式はbwghtgram ~ cigsのように，~ の左に被説明変数を，右に説明変数を書く。回帰式の計算結果はsimple_regressionというオブジェクトを作成してそこに格納し，stargazer()関数を使って結果を表示させる。 simple_regression &lt;- lm(bwghtgram ~ cigs, data = bwght) stargazer(simple_regression, type = &quot;text&quot;) ## ## =============================================== ## Dependent variable: ## --------------------------- ## bwghtgram ## ----------------------------------------------- ## cigs -14.565*** ## (2.565) ## ## Constant 3,395.473*** ## (16.226) ## ## ----------------------------------------------- ## Observations 1,388 ## R2 0.023 ## Adjusted R2 0.022 ## Residual Std. Error 570.635 (df = 1386) ## F Statistic 32.235*** (df = 1; 1386) ## =============================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 この結果は，\\(\\hat{\\beta_0}\\)が3,395.4，\\(\\hat{\\beta_1}\\)が-14.6であることを意味している。\\(\\hat{\\beta_0}\\)は定数項(Constant)や切片といわれ，\\(cigs\\)がゼロのときの\\(\\widehat{bwghtgram}\\)である。\\(\\hat{\\beta_1}\\)は傾きで，\\(cigs\\)が1本増加したときにどれだけ\\(\\widehat{bwghtgram}\\)が変化するかを表している。この場合，\\(\\hat{\\beta_1}\\)は-14.6であるから，母親の喫煙量が1本増加すれば，新生児の体重が14.6グラム減少する。 \\(\\hat{\\beta_0}, \\hat{\\beta_1}\\)の下の括弧内の数値は標準誤差である。係数についている*印は，係数の統計的有意性を表している。 6.3 重回帰分析 新生児の出生時体重に影響を与える要因は母親の喫煙だけではない。たとえば，家計収入は妊娠中の環境や栄養状態を通じて，新生児の出生時体重に影響を与えると考えられる。問題なのは，家計収入が低い家計の母親ほど喫煙量が多いとすれば，母親の喫煙量と新生児の出生時体重に相関があったとしても，実際に新生児の出生時体重に影響を与えているのは家計収入であって母親の喫煙量ではないかもしれないということである。そのため，家計収入が同じで母親の喫煙量が異なる場合に，新生児の出生時体重がどのように異なるかを分析することが必要である。 そこで以下のような回帰式を考えよう。 \\[ \\widehat{bwghtgram_i} = \\hat{\\beta_0} + \\hat{\\beta_1} cigs_i + \\hat{\\beta_2} faminc \\] 説明変数が複数ある場合にも，最小自乗法を用いて\\(\\hat{\\beta_0}, \\hat{\\beta_1}, \\hat{\\beta_2}\\)を求めることができる。このとき，\\(\\hat{\\beta_1}\\)は，\\(faminc\\)を一定として\\(cigs\\)が1本増加したときにどれだけ\\(\\widehat{bwghtgram}\\)が変化するかを表している。同様に，\\(\\hat{\\beta_2}\\)は\\(cigs\\)を一定として，\\(faminc\\)が1,000ドル増加したときにどれだけ\\(\\widehat{bwghtgram}\\)が変化するかを表している。つまり重回帰分析を使えば，ほかの説明変数を一定として(計量経済学では「コントロールして」という)，着目する説明変数が変化したときに被説明変数がどのように変化するかを分析することができる。 説明変数が複数ある場合には，lm()関数の回帰式の右辺に説明変数を+で結んで書く。たとえば，被説明変数がbwghtgra，説明変数がcigsとfamincの回帰式は，bwghtgram ~ cigs + faminicと表す。 simple_regression &lt;- lm(bwghtgram ~ cigs + faminc, data = bwght) stargazer(simple_regression, type = &quot;text&quot;) ## ## =============================================== ## Dependent variable: ## --------------------------- ## bwghtgram ## ----------------------------------------------- ## cigs -13.137*** ## (2.596) ## ## faminc 2.630*** ## (0.827) ## ## Constant 3,316.158*** ## (29.738) ## ## ----------------------------------------------- ## Observations 1,388 ## R2 0.030 ## Adjusted R2 0.028 ## Residual Std. Error 568.771 (df = 1385) ## F Statistic 21.274*** (df = 2; 1385) ## =============================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 famincを説明変数に加えた結果，cigsの係数は単回帰の場合に比べて絶対値で少し小さくなった。すなわち，母親の喫煙量と新生児の出生時体重との相関の一部は家計収入の影響によるものである。しかし，家計収入が同じであっても，やはり母親の喫煙量が1本増加すれば新生児の出生時体重が13.1グラムは減少するということもわかる。また，母親の喫煙量が同じであれば，家計収入が1,000ドル増加すれば新生児の出生時体重が2.6グラム増加する。 もちろん，新生児の出生時体重に影響を与えるすべての要因を回帰式に含めることはできない。すべての要因がデータに記録されているわけではないからである。回帰式に含めることができない要因が説明変数と相関していれば，最小二乗法によって求めた係数にはバイアスが生じる。これを欠落変数バイアスという。たとえば，新生児の出生時体重に影響を与える要因が母親の喫煙量と家計収入の2つであるとすれば，新生児の出生時体重を説明するモデルの説明変数に家計収入を入れず母親の喫煙量だけで回帰すると，母親の喫煙量の効果の推定量には欠落変数バイアスが生じる。 欠落変数バイアスの問題を解決することは難しいが，どのようなバイアスが生じているかを考えることが重要である。また，少なくてもデータに記録されている要因はできるだけ説明変数に加えて回帰式を推定することが望ましい。 このデータセットには，新生児の性別や出生順位，両親の教育水準，人種が記録されている。そこで，これらの情報を用いて重回帰分析を行おう。 まず，分析に利用する変数だけを含むデータフレームdatasetを作成する。 dataset &lt;- select(bwght, bwghtgram, cigs, lfaminc, parity, motheduc, fatheduc, male, white) レポートや論文を書くときには，分析に利用した変数の要約統計量を示す必要がある。レポートや論文に掲載する要約統計表を作成するには，stargazerパッケージが便利だ。 stargazer(dataset, type = &quot;text&quot;, title = &quot;要約統計表&quot;, digits = 2, summary.stat = c(&quot;n&quot;, &quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;p25&quot;, &quot;median&quot;, &quot;p75&quot;, &quot;max&quot;)) ## ## 要約統計表 ## ============================================================================ ## Statistic N Mean St. Dev. Min Pctl(25) Median Pctl(75) Max ## ---------------------------------------------------------------------------- ## bwghtgram 1,388 3,365.07 577.02 652.04 3,033.40 3,401.94 3,742.13 7,682.71 ## cigs 1,388 2.09 5.97 0 0 0 0 50 ## lfaminc 1,388 3.07 0.92 -0.69 2.67 3.31 3.62 4.17 ## parity 1,388 1.63 0.89 1 1 1 2 6 ## motheduc 1,387 12.94 2.38 2 12 12 14 18 ## fatheduc 1,192 13.19 2.75 1 12 12 16 18 ## male 1,388 0.52 0.50 0 0 1 1 1 ## white 1,388 0.78 0.41 0 1 1 1 1 ## ---------------------------------------------------------------------------- 次に，父親と母親の修学年数を除くすべての変数を説明変数として重回帰分析を行う。 simple_regression &lt;- lm(bwghtgram ~ cigs + lfaminc + parity + male + white, data = bwght) stargazer(simple_regression, type = &quot;text&quot;) ## ## =============================================== ## Dependent variable: ## --------------------------- ## bwghtgram ## ----------------------------------------------- ## cigs -14.056*** ## (2.572) ## ## lfaminc 32.790* ## (17.905) ## ## parity 50.981*** ## (17.024) ## ## male 90.104*** ## (30.280) ## ## white 159.457*** ## (39.404) ## ## Constant 3,038.433*** ## (66.918) ## ## ----------------------------------------------- ## Observations 1,388 ## R2 0.052 ## Adjusted R2 0.048 ## Residual Std. Error 562.887 (df = 1382) ## F Statistic 15.110*** (df = 5; 1382) ## =============================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 この結果の解釈は以下のようになる。 他の要因を一定として，母親の1日の喫煙量が1本増加すれば，新生児の出生時体重は14グラム減少する 他の要因を一定として，家計収入が1,000ドル増加すれば，新生児の出生時体重は33グラム増加する 他の要因を一定として，出生順位が1つ増加すれば，新生児の出生時体重は51グラム増加する 他の要因を一定として，男児の出生時体重は女児よりも90グラム重い 他の要因を一定として，白人の出生時体重は他の人種よりも159グラム重い 6.4 ダミー変数 上の重回帰分析で，maleやwhiteという説明変数を用いた。maleには新生児が男児であれば1，女児であれば0が記録されている。whiteには新生児が白人であれば1，それ以外の人種であれば0が記録されている。このように，数値では表すことができないカテゴリ情報を0と1によって表した変数をダミー変数という。ダミー変数を説明変数に用いた場合，その係数はどのように解釈できるだろうか。 いま，単純化のために以下のような回帰式を考えよう。 \\[ \\widehat{bwghtgram} = \\hat{\\beta}_0 + \\hat{\\beta}_1 cigs + \\hat{\\beta}_2 male \\] もし新生児が男児であれば，male=1であるため，この回帰式は， \\[ \\widehat{bwghtgram} = \\hat{\\beta}_0 + \\hat{\\beta}_1 cigs + \\hat{\\beta}_2 \\] となる。一方で，もし新生児が女児であれば，male=0であるため，この回帰式は， \\[ \\widehat{bwghtgram} = \\hat{\\beta}_0 + \\hat{\\beta}_1 cigs \\] となる。すなわち，新生児が男児の場合と女児の場合では，出生時体重の予測値が\\(\\hat{\\beta}_2\\)だけ異なる。したがって，maleの係数の推定値\\(\\hat{\\beta}_2\\)は，他の要因を一定として(この場合は母親の喫煙量が同じであるとして)女児に比べて男児の出生時体重がどれだけ重いかということを表している。 カテゴリが3つ以上の場合には，カテゴリ数-1だけのダミー変数を作成して説明変数に用いる。たとえば，地域として北海道，本州，四国，九州・沖縄の4つのうちのどれかが記録されている変数があるとする。この場合には，本州を基準として，北海道ダミー，四国ダミー，九州・沖縄ダミーの3つのダミー変数を作成して説明変数として用いれば良い。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
